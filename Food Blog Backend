import sqlite3
import argparse

parser = argparse.ArgumentParser(description="This program prints recipes \
consisting of the ingredients you provide.")
parser.add_argument('database_name', default=None, nargs='?')
parser.add_argument("--ingredients",
                    help="Specify ingredients you'd like to use in your recipe.")
parser.add_argument("--meals", default="breakfast,brunch,lunch,supper",
                    help="Specify meals you'd like to use the recipe for.")
args = parser.parse_args()

conn = sqlite3.connect(args.database_name)
cur = conn.cursor()
cur.execute("PRAGMA foreign_keys = ON")

cur.execute("CREATE table IF NOT EXISTS meals("
            "meal_id INTEGER PRIMARY KEY, "
            "meal_name TEXT NOT NULL UNIQUE)")
conn.commit()
cur.execute("CREATE table IF NOT EXISTS ingredients("
            "ingredient_id INTEGER PRIMARY KEY, "
            "ingredient_name TEXT NOT NULL UNIQUE)")
conn.commit()
cur.execute("CREATE table IF NOT EXISTS measures("
            "measure_id INTEGER PRIMARY KEY, "
            "measure_name TEXT UNIQUE)")
conn.commit()

data = {"meals": ("breakfast", "brunch", "lunch", "supper"),
        "ingredients": ("milk", "cacao", "strawberry", "blueberry", "blackberry", "sugar"),
        "measures": ("ml", "g", "l", "cup", "tbsp", "tsp", "dsp", "")}

cur.execute("SELECT count(*) FROM meals")
empty_check = int(str(cur.fetchone()).strip('[](),'))
if empty_check == 0:
    i = 0
    while i < len(list(data)):
        j = 0
        while j < len(data[list(data)[i]]):
            if i == 0:
                cur.execute("INSERT INTO meals VALUES(?, ?)", (int(j + 1), (str(data[list(data)[i]][j]))))
            elif i == 1:
                cur.execute("INSERT INTO ingredients VALUES(?, ?)", (int(j + 1), (str(data[list(data)[i]][j]))))
            elif i == 2:
                cur.execute("INSERT INTO measures VALUES(?, ?)", (int(j + 1), (str(data[list(data)[i]][j]))))
            conn.commit()
            j += 1
        i += 1

cur.execute("CREATE table IF NOT EXISTS recipes("
            "recipe_id INTEGER PRIMARY KEY, "
            "recipe_name TEXT NOT NULL, "
            "recipe_description TEXT)")
conn.commit()

cur.execute("CREATE table IF NOT EXISTS serve("
            "serve_id INTEGER PRIMARY KEY,"
            "recipe_id INTEGER NOT NULL,"
            "meal_id INTEGER NOT NULL,"
            "FOREIGN KEY (recipe_id) REFERENCES recipes (recipe_id),"
            "FOREIGN KEY (meal_id) REFERENCES meals (meal_id))")
conn.commit()

cur.execute("CREATE table IF NOT EXISTS quantity("
            "quantity_id INTEGER PRIMARY KEY,"
            "measure_id INTEGER NOT NULL, "
            "ingredient_id INTEGER NOT NULL,"
            "quantity INTEGER NOT NULL,"
            "recipe_id INTEGER NOT NULL,"
            "FOREIGN KEY (recipe_id) REFERENCES recipes (recipe_id),"
            "FOREIGN KEY (ingredient_id) REFERENCES ingredients (ingredient_id),"
            "FOREIGN KEY (measure_id) REFERENCES measures (measure_id))")
conn.commit()

if args.ingredients:
    user_ingredients_list = args.ingredients.split(',')
    user_meals_list = args.meals.split(',')
    user_meals = '("'
    im = 0
    while im < len(user_meals_list):
        if im != len(user_meals_list) - 1:
            user_meals += str(user_meals_list[im]) + '", "'
        else:
            user_meals += str(user_meals_list[im]) + '")'
        im += 1
    i = 0
    recommends = []
    while i < len(user_ingredients_list):
        cur.execute("SELECT distinct recipes.recipe_id, recipe_name FROM recipes"
                    " LEFT JOIN serve ON recipes.recipe_id = serve.recipe_id"
                    " LEFT JOIN meals ON serve.meal_id = meals.meal_id"
                    " LEFT JOIN quantity ON recipes.recipe_id = quantity.recipe_id"
                    " LEFT JOIN ingredients ON quantity.ingredient_id = ingredients.ingredient_id"
                    " WHERE ingredient_name = ?",
                    (str(user_ingredients_list[i]),))
        conn.commit()
        recommend_i = list(sum(cur.fetchall(), ()))
        if len(recommend_i) == 0:
            print('There are no such recipes in the database')
            break
        else:
            recommends.append(recommend_i)
        i += 1
    match = ''
    jr = 1
    if len(recommends) == 1:
        while jr < len(recommends[0]):
            if not recommends[0][jr].isdigit():
                if match != '':
                    match += ', ' + str(recommends[0][jr])
                else:
                    match += str(recommends[0][jr])
            jr += 2
    if len(recommends) > 1:
        ir = 0
        while ir < len(recommends) - 1:
            jr = 1
            while jr < len(recommends[ir]):
                if recommends[ir][jr] in recommends[ir + 1] and not recommends[ir][jr].isdigit():
                    if match != '':
                        match += ', ' + str(recommends[ir][jr])
                    else:
                        match += str(recommends[ir][jr])
                jr += 2
            ir += 1
    print('Recipes selected for you: ', match)

else:
    print('Pass the empty recipe name to exit.')
    recipe_name = 'start'
    num = 1
    while recipe_name != '':
        recipe_name = input('Recipe name: ')
        if recipe_name == '':
            break
        recipe_desc = input('Recipe description: ')
#       cur.execute("SELECT count(*) FROM recipes WHERE recipe_name = ?", [recipe_name])
#       recipe_count = int(str(cur.fetchone()).strip('[](),'))
#       if recipe_count == 0:
        cur.execute("INSERT INTO recipes VALUES(?, ?, ?)", (num, recipe_name, recipe_desc))
        conn.commit()
        print('1) breakfast  2) brunch  3) lunch  4) supper')
        when = list(input('When the dish can be served: '))
        i = 0
        while i < len(when):
            if when[i] in ['1', '2', '3', '4']:
                cur.execute("INSERT INTO serve (recipe_id, meal_id) VALUES("
                            "(SELECT recipe_id from recipes WHERE recipe_name= ?),"
                            "? )", (recipe_name, int(when[i])))
                conn.commit()
            i += 1
        quantity = ['start']
        while len(quantity) != 0:
            quantity = input('Input quantity of ingredient <press enter to stop>:\n').split()
            if len(quantity) == 0:
                break
            if len(quantity) == 2:
                quantity.insert(1, "")
            if len(quantity) == 3:
                cur.execute("SELECT count(*) FROM measures WHERE measure_name = ?", [str(quantity[1])])
                measure_count = int(str(cur.fetchone()).strip('[](),'))
                if measure_count == 0:
                    print('The measure is not conclusive!')
                    continue
                cur.execute("SELECT count(*) FROM ingredients WHERE ingredient_name LIKE ?", [str(quantity[2])+'%'])
                ingredient_count = int(str(cur.fetchone()).strip('[](),'))
                if ingredient_count == 0:
                    print('The ingredient is not conclusive!')
                    continue
                else:
                    cur.execute("INSERT INTO quantity (measure_id, ingredient_id, quantity, recipe_id) VALUES("
                                "(SELECT measure_id from measures WHERE measure_name= ?),"
                                "(SELECT ingredient_id from ingredients WHERE ingredient_name LIKE ?),"
                                "?,?)",
                                (quantity[1], quantity[2] + '%', quantity[0], num))
                    conn.commit()
        num += 1

conn.close()
